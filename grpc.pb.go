// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

/*
Package ultron is a generated protocol buffer package.

It is generated from these files:
	grpc.proto

It has these top-level messages:
	Result
	AttackerError
	ClientInfo
	Ack
	Message
*/
package ultron

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message_Type int32

const (
	Message_Disconnect    Message_Type = 0
	Message_RefreshConfig Message_Type = 1
	Message_StartAttack   Message_Type = 2
	Message_StopAttack    Message_Type = 3
)

var Message_Type_name = map[int32]string{
	0: "Disconnect",
	1: "RefreshConfig",
	2: "StartAttack",
	3: "StopAttack",
}
var Message_Type_value = map[string]int32{
	"Disconnect":    0,
	"RefreshConfig": 1,
	"StartAttack":   2,
	"StopAttack":    3,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}
func (Message_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4, 0} }

type Result struct {
	Name     string         `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Duration int64          `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
	Error    *AttackerError `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Result) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Result) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Result) GetError() *AttackerError {
	if m != nil {
		return m.Error
	}
	return nil
}

type AttackerError struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	CausedBy string `protobuf:"bytes,2,opt,name=causedBy" json:"causedBy,omitempty"`
}

func (m *AttackerError) Reset()                    { *m = AttackerError{} }
func (m *AttackerError) String() string            { return proto.CompactTextString(m) }
func (*AttackerError) ProtoMessage()               {}
func (*AttackerError) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AttackerError) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AttackerError) GetCausedBy() string {
	if m != nil {
		return m.CausedBy
	}
	return ""
}

type ClientInfo struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ClientInfo) Reset()                    { *m = ClientInfo{} }
func (m *ClientInfo) String() string            { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()               {}
func (*ClientInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ClientInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Ack struct {
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type Message struct {
	Type Message_Type `protobuf:"varint,1,opt,name=type,enum=ultron.Message_Type" json:"type,omitempty"`
	Data []byte       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_Disconnect
}

func (m *Message) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Result)(nil), "ultron.Result")
	proto.RegisterType((*AttackerError)(nil), "ultron.AttackerError")
	proto.RegisterType((*ClientInfo)(nil), "ultron.ClientInfo")
	proto.RegisterType((*Ack)(nil), "ultron.Ack")
	proto.RegisterType((*Message)(nil), "ultron.Message")
	proto.RegisterEnum("ultron.Message_Type", Message_Type_name, Message_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ultron service

type UltronClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Ultron_SendClient, error)
	Subscribe(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (Ultron_SubscribeClient, error)
}

type ultronClient struct {
	cc *grpc.ClientConn
}

func NewUltronClient(cc *grpc.ClientConn) UltronClient {
	return &ultronClient{cc}
}

func (c *ultronClient) Send(ctx context.Context, opts ...grpc.CallOption) (Ultron_SendClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ultron_serviceDesc.Streams[0], c.cc, "/ultron.Ultron/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &ultronSendClient{stream}
	return x, nil
}

type Ultron_SendClient interface {
	Send(*Result) error
	CloseAndRecv() (*Ack, error)
	grpc.ClientStream
}

type ultronSendClient struct {
	grpc.ClientStream
}

func (x *ultronSendClient) Send(m *Result) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ultronSendClient) CloseAndRecv() (*Ack, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Ack)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ultronClient) Subscribe(ctx context.Context, in *ClientInfo, opts ...grpc.CallOption) (Ultron_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ultron_serviceDesc.Streams[1], c.cc, "/ultron.Ultron/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &ultronSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ultron_SubscribeClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type ultronSubscribeClient struct {
	grpc.ClientStream
}

func (x *ultronSubscribeClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Ultron service

type UltronServer interface {
	Send(Ultron_SendServer) error
	Subscribe(*ClientInfo, Ultron_SubscribeServer) error
}

func RegisterUltronServer(s *grpc.Server, srv UltronServer) {
	s.RegisterService(&_Ultron_serviceDesc, srv)
}

func _Ultron_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UltronServer).Send(&ultronSendServer{stream})
}

type Ultron_SendServer interface {
	SendAndClose(*Ack) error
	Recv() (*Result, error)
	grpc.ServerStream
}

type ultronSendServer struct {
	grpc.ServerStream
}

func (x *ultronSendServer) SendAndClose(m *Ack) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ultronSendServer) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Ultron_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ClientInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UltronServer).Subscribe(m, &ultronSubscribeServer{stream})
}

type Ultron_SubscribeServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type ultronSubscribeServer struct {
	grpc.ServerStream
}

func (x *ultronSubscribeServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _Ultron_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ultron.Ultron",
	HandlerType: (*UltronServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Ultron_Send_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Ultron_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc.proto",
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x51, 0xc1, 0x4e, 0xe3, 0x30,
	0x10, 0xad, 0x93, 0x34, 0xbb, 0x9d, 0x6e, 0xd3, 0xee, 0x68, 0x57, 0xaa, 0x2a, 0x0e, 0x95, 0x2f,
	0x44, 0x42, 0x8a, 0x50, 0xe1, 0x8e, 0x4a, 0xe1, 0x00, 0x12, 0x17, 0x07, 0x3e, 0xc0, 0x75, 0xa6,
	0x21, 0x6a, 0xb1, 0x23, 0xc7, 0x39, 0xf4, 0x3b, 0xf8, 0x61, 0x94, 0xa4, 0x2d, 0x02, 0x89, 0xdb,
	0xbc, 0xbc, 0x37, 0x79, 0x6f, 0x9e, 0x01, 0x72, 0x5b, 0xaa, 0xa4, 0xb4, 0xc6, 0x19, 0x0c, 0xeb,
	0x9d, 0xb3, 0x46, 0x73, 0x82, 0x50, 0x50, 0x55, 0xef, 0x1c, 0x22, 0x04, 0x5a, 0xbe, 0xd1, 0x94,
	0xcd, 0x59, 0x3c, 0x10, 0xed, 0x8c, 0x33, 0xf8, 0x9d, 0xd5, 0x56, 0xba, 0xc2, 0xe8, 0xa9, 0x37,
	0x67, 0xb1, 0x2f, 0x4e, 0x18, 0x2f, 0xa0, 0x4f, 0xd6, 0x1a, 0x3b, 0xf5, 0xe7, 0x2c, 0x1e, 0x2e,
	0xfe, 0x27, 0xdd, 0x1f, 0x93, 0xa5, 0x73, 0x52, 0x6d, 0xc9, 0xde, 0x37, 0xa4, 0xe8, 0x34, 0xfc,
	0x06, 0x46, 0x5f, 0xbe, 0xff, 0xe4, 0xa6, 0x64, 0x5d, 0x51, 0x76, 0xbb, 0x6f, 0xdd, 0x06, 0xe2,
	0x84, 0xf9, 0x19, 0xc0, 0x6a, 0x57, 0x90, 0x76, 0x0f, 0x7a, 0x63, 0x30, 0x02, 0xaf, 0xc8, 0x0e,
	0xbb, 0x5e, 0x91, 0xf1, 0x3e, 0xf8, 0x4b, 0xb5, 0xe5, 0xef, 0x0c, 0x7e, 0x3d, 0x51, 0x55, 0xc9,
	0x9c, 0x30, 0x86, 0xc0, 0xed, 0xcb, 0xce, 0x20, 0x5a, 0xfc, 0x3b, 0xa6, 0x3b, 0xd0, 0xc9, 0xf3,
	0xbe, 0x24, 0xd1, 0x2a, 0x9a, 0x28, 0x99, 0x74, 0xb2, 0xb5, 0xfc, 0x23, 0xda, 0x99, 0x3f, 0x42,
	0xd0, 0x28, 0x30, 0x02, 0xb8, 0x2b, 0x2a, 0x65, 0xb4, 0x26, 0xe5, 0x26, 0x3d, 0xfc, 0x0b, 0x23,
	0x41, 0x1b, 0x4b, 0xd5, 0xeb, 0xca, 0xe8, 0x4d, 0x91, 0x4f, 0x18, 0x8e, 0x61, 0x98, 0x3a, 0x69,
	0x5d, 0x77, 0xdf, 0xc4, 0x6b, 0x76, 0x52, 0x67, 0xca, 0x03, 0xf6, 0x17, 0x39, 0x84, 0x2f, 0xad,
	0x39, 0x9e, 0x43, 0x90, 0x92, 0xce, 0x30, 0x3a, 0xa6, 0xe9, 0xaa, 0x9f, 0x0d, 0x4f, 0xdd, 0xa9,
	0x2d, 0xef, 0xc5, 0x0c, 0xaf, 0x61, 0x90, 0xd6, 0xeb, 0x4a, 0xd9, 0x62, 0x4d, 0x88, 0x47, 0xf6,
	0xb3, 0x80, 0xd9, 0xf8, 0xdb, 0x3d, 0xbc, 0x77, 0xc9, 0xd6, 0x61, 0xfb, 0xb4, 0x57, 0x1f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x23, 0x20, 0x64, 0x1f, 0xe8, 0x01, 0x00, 0x00,
}
